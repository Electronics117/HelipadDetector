# -*- coding: utf-8 -*-
"""SabinHelipadDetectorWithEffNet7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GHV5m7Vmma9_qUe51c5R3Jb3yko4s8QI
"""

# from google.colab import drive  #make sure to reconnect each time
# drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import keras
from keras import  backend as K
from keras.models import Sequential
from keras.layers import Activation
from keras.layers.core import Dense, Flatten
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import *
from matplotlib import pyplot as plt
from sklearn.metrics import confusion_matrix
import itertools
import matplotlib.pyplot as plt
# %matplotlib inline
# import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers import Dense

train_path = '/content/drive/My Drive/HelipadAndWithoutHelipad/train'
valid_path = '/content/drive/My Drive/HelipadAndWithoutHelipad/valid'
test_path = '/content/drive/My Drive/HelipadAndWithoutHelipad/test'

train_batches = ImageDataGenerator().flow_from_directory(train_path, target_size=(640,640), classes=['Helipad', 'NoHelipad'], batch_size=10)
valid_batches = ImageDataGenerator().flow_from_directory(valid_path, target_size=(640,640), classes=['Helipad', 'NoHelipad'], batch_size=4)
test_batches = ImageDataGenerator().flow_from_directory(test_path, target_size=(640,640), classes=['Helipad', 'NoHelipad'], batch_size=10)

# plots images with labes within notebook
def plots(ims, figsize=(12,6), rows=1, interp=False, titles=None):
  if type(ims[0]) is np.ndarray:
    ims = np.array(ims).astype(np.uint8)
    if (ims.shape[-1] != 3):
      ims = ims.transpose((0,2,3,1))
  f = plt.figure(figsize=figsize)
  cols = len(ims)//rows if len(ims) % 2 == 0 else len(ims)//rows +1
  for i in range(len(ims)):
    sp = f.add_subplot(rows, cols, i+1)
    sp.axis('Off')
    if titles is not None:
      sp.set_title(titles[i], fontsize=16)
    plt.imshow(ims[i], interpolation=None if interp else 'none')

imgs, labels = next(train_batches)

# imgs

plots(imgs, titles=labels)

"""# Build and train CNN"""

# modelFromSratch = Sequential([
#                 Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),    # CASE sensative
#                 Flatten(),
#                 Dense(2, activation='softmax'),
# ])

# modelFromSratch.compile(Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

# steps per epoch = images/batch_size aka sizeOfData/batchSize ie 40/10 which = 4
# modelFromSratch.fit_generator(train_batches, steps_per_epoch=4,
#                     validation_data=valid_batches, validation_steps=4, epochs=5, verbose=2)

"""# Fine Tunned CNN (using EffNet7)"""

# efficientNetB7 = keras.applications.EfficientNetB7()

efficient_net = keras.applications.EfficientNetB7(
    weights='imagenet',
    input_shape=(640,640,3),
    include_top=False,
    pooling='max' 
)

type(efficient_net)

# for layer in efficient_net.layers:
#   layer.trainable = False

# efficient_net.trainable = False

model = Sequential()
model.add(efficient_net)
# model.add(Dense(units = 120, activation='relu'))
model.add(Dense(units = 120, activation = 'relu'))
model.add(Dense(units = 2, activation='sigmoid'))                                         
model.summary()

# seq_model.summary()

"""# Train Fine Tuned EffNet7



"""

# model.compile(Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

model.compile(optimizer=Adam(lr=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

# steps per epoch = images/batch_size aka sizeOfData/batchSize ie 40/10 which = 4
model.fit_generator(train_batches, steps_per_epoch=4,
                    validation_data=valid_batches, validation_steps=4, epochs=5, verbose=2)